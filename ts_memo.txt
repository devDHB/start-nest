@@ TS의 타입
string
number
string[]
{}
null
undefined 
boolean
void
never
unknown

@@
타입 앞에
readonly 넣으면 불변성 추가(수정, 재선언 불가)

@@ tuple
튜플은 특정 위치에 특정 타입이 있어야함
예를들어
const human: [string, number, boolean] 
= ["doo", 12, false]

정상적으로 작동
튜플을 사용하면 항상 정해진 개수의 요소를 가져야하는
배열을 지정할 수 있음
이거도 하나의 보호장치임

player[0] = 1 // 에러

const human: readonly [string, number, boolean] 
= ["doo", 12, false]
이러면 바꿀수도 없음


@@ null / undefined 
type Man = {
  age?:number, // number | undefined
}

@@ any
let a = []
일단 기본적으로 타입은 any임
ts의 보호장치에게서 벗어나고 싶을때 사용함

** any 는 사용하지 않는걸 추천
ts를 벗어나는 것이기 때문

const a : any[] = [1,2,3]
const b : any = true
a+b
이렇게 해도 작동함
진짜 필요할 때 사용하자


@@ unknown 
TS 에서만 존재함 
Type Checker 와 소통할 때 중요함

어떤 타입인지 모르는 변수는 TS에게 어떻게 전달해야할까
let a : unknown; // 언노운 지정

예를들어 
let b = a + 1 // ts에서 허용 안함
그래서 
if(typeof a === "number") {
  let b = a + 1
}
// 이렇게 타입체크를 하고 감
if(typeof a === "string") {
  let b = a.toUpperCase();
}

이런식으로 변수의 타입을 미리 알지 못할때 사용

@@ void
아무것도 리턴하지않는 함수를 대상으로 사용

function hi() {
  console.log('hi');
}
따로 지정할 필요 없음

@@ never
함수가 절대 리턴하지 않을때 발생

예를들어
function hello():never {
  throw new Error("err")
}
또는 타입이 두가지 일수도 있는 상황에 발생

function hello(name:string|number){
  if(typeof name == "string"){
    name // string
  } else if (typeof name == "number") {
    name // number
  } else {
    name // never
  }
}










